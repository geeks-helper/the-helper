{"version":3,"file":"component---src-templates-tool-post-tsx-2528d82f1d781c4b8977.js","mappings":"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","sources":["webpack://the-helper/./src/components/comment.tsx","webpack://the-helper/./src/styles/category.ts","webpack://the-helper/./src/styles/dateTime.ts","webpack://the-helper/./src/features/ScrabbleWordFinder/style.ts","webpack://the-helper/./src/features/ScrabbleWordFinder/index.tsx","webpack://the-helper/./src/components/MarkdownTable/index.tsx","webpack://the-helper/./src/features/WordsCount/style.ts","webpack://the-helper/./src/features/WordsCount/index.tsx","webpack://the-helper/./src/templates/toolPost.tsx"],"sourcesContent":["import React, { useContext, useEffect, useRef } from \"react\"\n\nimport { DARK } from \"~/src/constants/theme\"\nimport useSiteMetadata from \"~/src/hooks/useSiteMetadata\"\nimport ThemeContext from \"~/src/stores/themeContext\"\n\nconst src = \"https://utteranc.es\"\nconst utterancesSelector = \"iframe.utterances-frame\"\nconst LIGHT_THEME = \"github-light\"\nconst DARK_THEME = \"github-dark\"\n\ntype ThemeMode = typeof LIGHT_THEME | typeof DARK_THEME\n\nconst Comment = () => {\n  const site = useSiteMetadata()\n  const { repo } = site.utterances ?? { repo: undefined }\n  const theme = useContext(ThemeContext)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const isUtterancesCreated = useRef(false)\n\n  useEffect(() => {\n    if (!repo) return\n    let themeMode: ThemeMode\n\n    if (!isUtterancesCreated.current) {\n      themeMode =\n        document.body.dataset.theme === DARK ? DARK_THEME : LIGHT_THEME\n    } else themeMode = theme === DARK ? DARK_THEME : LIGHT_THEME\n\n    const createUtterancesEl = () => {\n      const comment = document.createElement(\"script\")\n      const attributes = {\n        src: `${src}/client.js`,\n        // repo: \"geeks-helper/the-helper\",\n        repo: \"geeks-helper/the-helper-comment\",\n        \"issue-term\": \"url\",\n        label: \"comment\",\n        theme: themeMode,\n        crossOrigin: \"anonymous\",\n        async: \"true\",\n      }\n      Object.entries(attributes).forEach(([key, value]) => {\n        comment.setAttribute(key, value)\n      })\n      containerRef.current?.appendChild(comment)\n      isUtterancesCreated.current = true\n    }\n\n    const utterancesEl = containerRef.current?.querySelector(\n      utterancesSelector\n    ) as HTMLIFrameElement\n\n    const postThemeMessage = () => {\n      if (!utterancesEl) return\n      const message = {\n        type: \"set-theme\",\n        theme: themeMode,\n      }\n      utterancesEl?.contentWindow?.postMessage(message, src)\n    }\n    isUtterancesCreated.current ? postThemeMessage() : createUtterancesEl()\n  }, [repo, theme])\n  return <div ref={containerRef} />\n}\n\nComment.displayName = \"comment\"\n\nexport default Comment\n","import styled from \"styled-components\"\n\nconst Category = styled.span`\n  display: block;\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-semi-bold);\n  color: var(--color-text-3);\n`\n\nexport default Category\n","import styled from \"styled-components\"\n\nconst DateTime = styled.time`\n  margin-top: 12px;\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-regular);\n  color: var(--color-text-3);\n`\n\nexport default DateTime\n","import styled from \"styled-components\"\n\nexport const ScrabbleFinderContainer = styled.div`\n  font-family: Arial, sans-serif;\n  text-align: center;\n`\n\nexport const InputContainer = styled.form`\n  margin-bottom: 20px;\n`\n\nexport const ScrabbleInput = styled.input`\n  padding: 10px;\n  font-size: 16px;\n  width: 100%;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`\n\nexport const ResultContainer = styled.div`\n  margin-top: 20px;\n`\n\nexport const ResultItem = styled.div`\n  margin-bottom: 4px;\n  font-size: 18px;\n  background: rgb(70 89 104);\n  color: white;\n  padding: 8px 8px;\n  border-radius: 4px;\n`\n\nexport const ItemWrapper = styled.div`\n  width: 100%;\n  border-top: 1px solid var(--color-gray-3);\n  border-bottom: 1px solid var(--color-gray-3);\n  padding: 16px;\n  display: flex;\n  gap: 16px;\n  align-items: flex-start;\n`\n\nexport const LettersCount = styled.div`\n  background: #6ec1e4;\n  font-size: 18px;\n  text-transform: uppercase;\n  color: white;\n  padding: 10px;\n  max-width: 200px;\n  letter-spacing: 2px;\n  line-height: 2;\n  border-radius: 8px;\n`\n\nexport const WordsWrapper = styled.div`\n  display: flex;\n  align-items: flex-start;\n  gap: 8px;\n  flex-wrap: wrap;\n  flex: 1;\n`\n","import React, { useEffect, useState } from \"react\"\n\nimport { ALL_WORDS_DATA } from \"./ALL_WORDS_DATA\"\nimport * as S from \"./style\"\n\nfunction categorizeWords(\n  inputText: string,\n  wordArray: string[]\n): Record<number, string[]> {\n  const userInput = inputText.toLowerCase()\n  const categorizedWords: Record<number, string[]> = {}\n\n  wordArray.forEach(word => {\n    const lowercaseWord = word.toLowerCase()\n\n    // Check if the word contains the user's input as a substring\n    if (lowercaseWord.includes(userInput)) {\n      const wordLength = lowercaseWord.length\n\n      if (!categorizedWords[wordLength]) {\n        categorizedWords[wordLength] = []\n      }\n\n      categorizedWords[wordLength].push(lowercaseWord)\n    }\n  })\n\n  return categorizedWords\n}\n\nconst ScrabbleWordFinder = () => {\n  const [wordsData, setWordData] = useState({})\n  const [inputText, setInputText] = useState(\"\")\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    setWordData(categorizeWords(inputText, ALL_WORDS_DATA))\n  }\n  const handleInputChange = e => {\n    const searchText = e.target.value.toLowerCase()\n    setInputText(searchText)\n  }\n  const word_arr = Object.entries(wordsData)\n  return (\n    <S.ScrabbleFinderContainer>\n      <h1>Scrabble Word Finder</h1>\n      <S.InputContainer onSubmit={handleSubmit}>\n        <label htmlFor=\"scrabbleInput\">Enter a word or part of a word:</label>\n        <S.ScrabbleInput\n          id=\"scrabbleInput\"\n          type=\"text\"\n          value={inputText}\n          onChange={handleInputChange}\n          placeholder=\"Enter your letters...\"\n        />\n        <button type=\"submit\">submit</button>\n      </S.InputContainer>\n      <S.ResultContainer>\n        <h2>Matching Words:</h2>\n        {word_arr?.length &&\n          word_arr.map(item => {\n            return (\n              <S.ItemWrapper key={item[0]}>\n                <S.LettersCount>\n                  {item[0]} Letter words({item[1].length})\n                </S.LettersCount>\n                <S.WordsWrapper>\n                  {item[1].map(word => (\n                    <S.ResultItem key={word}>{word}</S.ResultItem>\n                  ))}\n                </S.WordsWrapper>\n              </S.ItemWrapper>\n            )\n          })}\n      </S.ResultContainer>\n    </S.ScrabbleFinderContainer>\n  )\n}\n\nexport default ScrabbleWordFinder\n","import React, { useEffect, useState } from \"react\"\n\nimport styled from \"styled-components\"\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  font-family: Arial, sans-serif;\n  margin-top: 24px;\n`\n\nconst Th = styled.th`\n  background-color: #f2f2f2;\n  padding: 10px;\n  text-align: center;\n`\n\nconst Td = styled.td`\n  padding: 10px;\n  border-bottom: 1px solid #ddd;\n  text-align: center;\n`\nfunction analyzeString(\n  inputString: string\n): { word: string; count: number; percentage: string }[] {\n  // Step 1: Split the input string into an array of words\n  const words: string[] = inputString.split(/\\s+/)\n\n  // Step 2: Count the occurrences of each word using an object\n  const wordCounts: Record<string, number> = {}\n  words.forEach(word => {\n    if (wordCounts[word]) {\n      wordCounts[word]++\n    } else {\n      wordCounts[word] = 1\n    }\n  })\n\n  // Step 3: Calculate the total word count\n  const totalWordCount: number = words.length\n\n  // Step 4: Calculate the percentage for each word\n  const wordData: { word: string; count: number; percentage: string }[] = []\n  for (const word in wordCounts) {\n    const count: number = wordCounts[word]\n    const percentage: string = ((count / totalWordCount) * 100).toFixed(2) + \"%\"\n    wordData.push({ word, count, percentage })\n  }\n\n  return wordData\n}\n\nconst MarkdownTable = ({ text = \"\" }) => {\n  const [data, setData] = useState([])\n  useEffect(() => {\n    const arr: string[] | any = analyzeString(text)\n    setData(arr)\n  }, [text])\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <Th>Word</Th>\n          <Th>Count</Th>\n          <Th>%</Th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item, index) => (\n          <tr key={index}>\n            <Td>{item.word}</Td>\n            <Td>{item.count}</Td>\n            <Td>{item.percentage}</Td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default MarkdownTable\n","import styled from \"styled-components\"\n\nexport const MarkdownStyles = `\n  font-family: Arial, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  color: #333;\n\n  h1 {\n    font-size: 2em;\n    margin: 1.2em 0;\n  }\n\n  h2 {\n    font-size: 1.5em;\n    margin: 1em 0;\n  }\n\n  h3 {\n    font-size: 1.2em;\n    margin: 1em 0;\n  }\n\n  p {\n    margin: 1em 0;\n  }\n\n  ul, ol {\n    margin: 1em 0;\n    padding-left: 1.5em;\n  }\n\n  li {\n    margin: 0.5em 0;\n  }\n\n  a {\n    color: #007acc;\n    text-decoration: underline;\n\n    &:hover {\n      color: #005fbf;\n    }\n  }\n`\n\nexport const WordsContWrapper = styled.div`\n  ${MarkdownStyles}\n  textarea {\n    border: 1px solid var(--color-blue);\n    width: 100%;\n    border-radius: 8px;\n    padding: 8px;\n  }\n`\n\nexport const CountInfo = styled.div`\n  font-size: 14px;\n  margin-top: 10px;\n  color: #777;\n  display: inline-block;\n`\nexport const StyledDropdownContainer = styled.div`\n  display: inline-block;\n  font-family: Arial, sans-serif;\n  margin-bottom: 24px;\n`\n\nexport const StyledLabel = styled.label`\n  display: block;\n  font-size: 16px;\n  margin-bottom: 5px;\n  color: #333;\n`\n\nexport const CustomDropdown = styled.select`\n  appearance: none;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  color: #333;\n  cursor: pointer;\n  width: 200px; /* Adjust the width as needed */\n`\n","import React, { type ChangeEvent, useState } from \"react\"\n\nimport MarkdownTable from \"../../components/MarkdownTable\"\n\nimport * as S from \"./style\"\n\ninterface WordsContProps {\n  value: string\n}\n\nconst fontSizeOptions = [\n  { value: \"14px\", label: \"Small\" },\n  { value: \"16px\", label: \"Medium\" },\n  { value: \"18px\", label: \"Large\" },\n  { value: \"20px\", label: \"XL\" },\n  { value: \"24px\", label: \"XXL\" },\n]\n\nconst WordsCont: React.FC<WordsContProps> = () => {\n  const [inputValue, setInputValue] = useState<string>(\"\")\n  const [wordCount, setWordCount] = useState<number>(0)\n  const [charCount, setCharCount] = useState<number>(0)\n  const [lineCount, setLineCount] = useState<number>(0)\n  const [selectedFontSize, setSelectedFontSize] = useState<string>(\"16px\")\n\n  const handleFontSizeChange = e => {\n    setSelectedFontSize(e.target.value)\n    // You can perform any actions here based on the selected value\n  }\n\n  const countWords = (text: string): number => {\n    const words = text.trim().split(/\\s+/)\n    return words.filter(word => word !== \"\").length\n  }\n\n  const countChars = (text: string): number => {\n    return text.length\n  }\n\n  const countLines = (text: string): number => {\n    return text.split(\"\\n\").length\n  }\n\n  const handleInputChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\n    const text = e.target.value\n    setInputValue(text)\n    const newWordCount = countWords(text)\n    const newCharCount = countChars(text)\n    const newLineCount = countLines(text)\n\n    // Update counts\n    setWordCount(newWordCount)\n    setCharCount(newCharCount)\n    setLineCount(newLineCount)\n  }\n\n  return (\n    <>\n      <S.StyledDropdownContainer>\n        <S.StyledLabel htmlFor=\"fontSizeDropdown\">\n          Select Preferred Font Size:\n        </S.StyledLabel>\n        <S.CustomDropdown\n          id=\"fontSizeDropdown\"\n          value={selectedFontSize}\n          onChange={handleFontSizeChange}\n        >\n          {fontSizeOptions.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </S.CustomDropdown>\n      </S.StyledDropdownContainer>\n      <S.WordsContWrapper style={{ fontSize: selectedFontSize }}>\n        <textarea\n          rows={10}\n          cols={50}\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Start typing...\"\n        />\n        <S.CountInfo>\n          Words: {wordCount} | Characters: {charCount} | Lines: {lineCount}\n        </S.CountInfo>\n      </S.WordsContWrapper>\n      <MarkdownTable text={inputValue} />\n    </>\n  )\n}\n\nexport default WordsCont\n","import React from \"react\"\n\nimport { type PageProps, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Comment from \"~/src/components/comment\"\nimport SEO from \"~/src/components/seo\"\nimport ScrabbleWordFinder from \"~/src/features/ScrabbleWordFinder\"\nimport WordsCount from \"~/src/features/WordsCount\"\nimport Layout from \"~/src/layouts/layout\"\nimport Category from \"~/src/styles/category\"\nimport DateTime from \"~/src/styles/dateTime\"\nimport Markdown from \"~/src/styles/markdown\"\nimport { rhythm } from \"~/src/styles/typography\"\n\nconst RenderTool = ({ tool }) => {\n  if (!tool) return\n  switch (tool) {\n    case \"scrabbleWordFinder\":\n      return <ScrabbleWordFinder />\n    case \"wordsCount\":\n      return <WordsCount />\n\n    default:\n      return <p>invalid tool name</p>\n  }\n}\n\nconst toolPost: React.FC<PageProps<Queries.Query>> = ({ data }) => {\n  const { markdownRemark } = data\n  const { frontmatter, html } = markdownRemark!\n  const { title, desc, thumbnail, date, category, tool } = frontmatter!\n  const ogImagePath =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    thumbnail &&\n    thumbnail?.childImageSharp?.gatsbyImageData!.images!.fallback!.src\n\n  return (\n    <Layout>\n      <SEO title={title} desc={desc} image={ogImagePath} />\n      <main>\n        <article>\n          <OuterWrapper>\n            <InnerWrapper>\n              <div>\n                <header>\n                  <Info>\n                    <PostCategory>{category}</PostCategory>\n                    <Time dateTime={date!}>{date}</Time>\n                  </Info>\n                  <Title>{title}</Title>\n                  <Desc>{desc}</Desc>\n                </header>\n                <img src={ogImagePath} />\n                <Divider />\n                <RenderTool tool={tool} />\n\n                <Divider />\n                <Markdown\n                  dangerouslySetInnerHTML={{ __html: html ?? \"\" }}\n                  rhythm={rhythm}\n                />\n              </div>\n            </InnerWrapper>\n          </OuterWrapper>\n        </article>\n        <CommentWrap>\n          <Comment />\n        </CommentWrap>\n      </main>\n    </Layout>\n  )\n}\n\nconst OuterWrapper = styled.div`\n  margin-top: var(--sizing-xl);\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    margin-top: var(--sizing-lg);\n  }\n`\n\nconst InnerWrapper = styled.div`\n  width: var(--post-width);\n  margin: 0 auto;\n  padding-bottom: var(--sizing-lg);\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    width: 87.5%;\n  }\n`\n\nconst CommentWrap = styled.section`\n  width: 100%;\n  padding: 0 var(--padding-sm);\n  margin: 0 auto;\n  margin-bottom: var(--sizing-xl);\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    width: auto;\n  }\n`\n\nconst PostCategory = styled(Category)`\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-semi-bold);\n`\n\nconst Info = styled.div`\n  margin-bottom: var(--sizing-md);\n`\n\nconst Time = styled(DateTime)`\n  display: block;\n  margin-top: var(--sizing-xs);\n`\n\nconst Desc = styled.p`\n  margin-top: var(--sizing-lg);\n  line-height: 1.5;\n  font-size: var(--text-lg);\n  margin-bottom: 16px;\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    line-height: 1.31579;\n    font-size: 1.1875rem;\n  }\n`\n\nconst Divider = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: var(--color-gray-3);\n  margin-top: var(--sizing-lg);\n  margin-bottom: var(--sizing-lg);\n`\n\nconst Title = styled.h1`\n  font-weight: var(--font-weight-bold);\n  line-height: 1.1875;\n  font-size: var(--text-xl);\n\n  @media (max-width: ${({ theme }) => theme.device.md}) {\n    line-height: 1.21875;\n    font-size: 2.5rem;\n  }\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    line-height: 1.21875;\n    font-size: 2rem;\n  }\n`\n\nexport const query = graphql`\n  query ToolPostPage($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        desc\n        thumbnail {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, layout: FIXED)\n          }\n        }\n        date(formatString: \"YYYY-MM-DD\")\n        category\n        tool\n      }\n    }\n  }\n`\n\nexport default toolPost\n"],"names":["src","LIGHT_THEME","DARK_THEME","Comment","_site$utterances","site","useSiteMetadata","repo","utterances","undefined","theme","useContext","ThemeContext","containerRef","useRef","isUtterancesCreated","useEffect","_containerRef$current2","themeMode","current","DARK","document","body","dataset","utterancesEl","querySelector","postThemeMessage","_utterancesEl$content","message","type","contentWindow","postMessage","createUtterancesEl","_containerRef$current","comment","createElement","attributes","label","crossOrigin","async","Object","entries","forEach","_ref","key","value","setAttribute","appendChild","React","ref","displayName","Category","styled","span","withConfig","componentId","DateTime","time","ScrabbleFinderContainer","div","InputContainer","form","ScrabbleInput","input","ResultContainer","ResultItem","ItemWrapper","LettersCount","WordsWrapper","ScrabbleWordFinder","wordsData","setWordData","useState","inputText","setInputText","word_arr","S","onSubmit","e","preventDefault","wordArray","userInput","toLowerCase","categorizedWords","word","lowercaseWord","includes","wordLength","length","push","categorizeWords","ALL_WORDS_DATA","htmlFor","id","onChange","searchText","target","placeholder","map","item","Table","table","Th","th","Td","td","text","data","setData","arr","inputString","words","split","wordCounts","totalWordCount","wordData","count","percentage","toFixed","analyzeString","index","WordsContWrapper","CountInfo","StyledDropdownContainer","StyledLabel","CustomDropdown","select","fontSizeOptions","WordsCont","inputValue","setInputValue","wordCount","setWordCount","charCount","setCharCount","lineCount","setLineCount","selectedFontSize","setSelectedFontSize","option","style","fontSize","rows","cols","newWordCount","trim","filter","countWords","newCharCount","countChars","newLineCount","countLines","MarkdownTable","RenderTool","tool","WordsCount","OuterWrapper","_ref3","device","sm","InnerWrapper","_ref4","CommentWrap","section","_ref5","PostCategory","Info","Time","Desc","p","_ref6","Divider","Title","h1","_ref7","md","_ref8","_ref2","_thumbnail$childImage","markdownRemark","frontmatter","html","title","desc","thumbnail","date","category","ogImagePath","childImageSharp","gatsbyImageData","images","fallback","Layout","SEO","image","dateTime","Markdown","dangerouslySetInnerHTML","__html","rhythm"],"sourceRoot":""}