{"version":3,"file":"component---src-templates-tool-post-tsx-569d256bafa18177df2a.js","mappings":"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","sources":["webpack://the-helper/./src/components/comment.tsx","webpack://the-helper/./src/styles/category.ts","webpack://the-helper/./src/styles/dateTime.ts","webpack://the-helper/./src/components/MarkdownTable/index.tsx","webpack://the-helper/./src/features/WordsCount/style.ts","webpack://the-helper/./src/features/WordsCount/index.tsx","webpack://the-helper/./src/templates/toolPost.tsx"],"sourcesContent":["import React, { useContext, useEffect, useRef } from \"react\"\n\nimport { DARK } from \"~/src/constants/theme\"\nimport useSiteMetadata from \"~/src/hooks/useSiteMetadata\"\nimport ThemeContext from \"~/src/stores/themeContext\"\n\nconst src = \"https://utteranc.es\"\nconst utterancesSelector = \"iframe.utterances-frame\"\nconst LIGHT_THEME = \"github-light\"\nconst DARK_THEME = \"github-dark\"\n\ntype ThemeMode = typeof LIGHT_THEME | typeof DARK_THEME\n\nconst Comment = () => {\n  const site = useSiteMetadata()\n  const { repo } = site.utterances ?? { repo: undefined }\n  const theme = useContext(ThemeContext)\n  const containerRef = useRef<HTMLDivElement>(null)\n  const isUtterancesCreated = useRef(false)\n\n  useEffect(() => {\n    console.log({ repo })\n    if (!repo) return\n    let themeMode: ThemeMode\n\n    if (!isUtterancesCreated.current) {\n      themeMode =\n        document.body.dataset.theme === DARK ? DARK_THEME : LIGHT_THEME\n    } else themeMode = theme === DARK ? DARK_THEME : LIGHT_THEME\n\n    const createUtterancesEl = () => {\n      const comment = document.createElement(\"script\")\n      const attributes = {\n        src: `${src}/client.js`,\n        // repo: \"geeks-helper/the-helper\",\n        repo: \"geeks-helper/the-helper-comment\",\n        \"issue-term\": \"url\",\n        label: \"comment\",\n        theme: themeMode,\n        crossOrigin: \"anonymous\",\n        async: \"true\",\n      }\n      Object.entries(attributes).forEach(([key, value]) => {\n        comment.setAttribute(key, value)\n      })\n      containerRef.current?.appendChild(comment)\n      isUtterancesCreated.current = true\n    }\n\n    const utterancesEl = containerRef.current?.querySelector(\n      utterancesSelector\n    ) as HTMLIFrameElement\n\n    const postThemeMessage = () => {\n      if (!utterancesEl) return\n      const message = {\n        type: \"set-theme\",\n        theme: themeMode,\n      }\n      utterancesEl?.contentWindow?.postMessage(message, src)\n    }\n    console.log({ bbbb: isUtterancesCreated.current })\n    isUtterancesCreated.current ? postThemeMessage() : createUtterancesEl()\n  }, [repo, theme])\n  return <div ref={containerRef} />\n}\n\nComment.displayName = \"comment\"\n\nexport default Comment\n","import styled from \"styled-components\"\n\nconst Category = styled.span`\n  display: block;\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-semi-bold);\n  color: var(--color-text-3);\n`\n\nexport default Category\n","import styled from \"styled-components\"\n\nconst DateTime = styled.time`\n  margin-top: 12px;\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-regular);\n  color: var(--color-text-3);\n`\n\nexport default DateTime\n","import React, { useEffect, useState } from \"react\"\n\nimport styled from \"styled-components\"\n\nconst Table = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  font-family: Arial, sans-serif;\n  margin-top: 24px;\n`\n\nconst Th = styled.th`\n  background-color: #f2f2f2;\n  padding: 10px;\n  text-align: center;\n`\n\nconst Td = styled.td`\n  padding: 10px;\n  border-bottom: 1px solid #ddd;\n  text-align: center;\n`\nfunction analyzeString(\n  inputString: string\n): { word: string; count: number; percentage: string }[] {\n  // Step 1: Split the input string into an array of words\n  const words: string[] = inputString.split(/\\s+/)\n\n  // Step 2: Count the occurrences of each word using an object\n  const wordCounts: Record<string, number> = {}\n  words.forEach(word => {\n    if (wordCounts[word]) {\n      wordCounts[word]++\n    } else {\n      wordCounts[word] = 1\n    }\n  })\n\n  // Step 3: Calculate the total word count\n  const totalWordCount: number = words.length\n\n  // Step 4: Calculate the percentage for each word\n  const wordData: { word: string; count: number; percentage: string }[] = []\n  for (const word in wordCounts) {\n    const count: number = wordCounts[word]\n    const percentage: string = ((count / totalWordCount) * 100).toFixed(2) + \"%\"\n    console.log({ percentage })\n    wordData.push({ word, count, percentage })\n  }\n\n  return wordData\n}\n\nconst MarkdownTable = ({ text = \"\" }) => {\n  const [data, setData] = useState([])\n  console.log({ text })\n  useEffect(() => {\n    const arr: string[] | any = analyzeString(text)\n    setData(arr)\n  }, [text])\n  return (\n    <Table>\n      <thead>\n        <tr>\n          <Th>Word</Th>\n          <Th>Count</Th>\n          <Th>%</Th>\n        </tr>\n      </thead>\n      <tbody>\n        {data.map((item, index) => (\n          <tr key={index}>\n            <Td>{item.word}</Td>\n            <Td>{item.count}</Td>\n            <Td>{item.percentage}</Td>\n          </tr>\n        ))}\n      </tbody>\n    </Table>\n  )\n}\n\nexport default MarkdownTable\n","import styled from \"styled-components\"\n\nexport const MarkdownStyles = `\n  font-family: Arial, sans-serif;\n  font-size: 16px;\n  line-height: 1.6;\n  color: #333;\n\n  h1 {\n    font-size: 2em;\n    margin: 1.2em 0;\n  }\n\n  h2 {\n    font-size: 1.5em;\n    margin: 1em 0;\n  }\n\n  h3 {\n    font-size: 1.2em;\n    margin: 1em 0;\n  }\n\n  p {\n    margin: 1em 0;\n  }\n\n  ul, ol {\n    margin: 1em 0;\n    padding-left: 1.5em;\n  }\n\n  li {\n    margin: 0.5em 0;\n  }\n\n  a {\n    color: #007acc;\n    text-decoration: underline;\n\n    &:hover {\n      color: #005fbf;\n    }\n  }\n`\n\nexport const WordsContWrapper = styled.div`\n  ${MarkdownStyles}\n  textarea {\n    border: 1px solid var(--color-blue);\n    width: 100%;\n    border-radius: 8px;\n    padding: 8px;\n  }\n`\n\nexport const CountInfo = styled.div`\n  font-size: 14px;\n  margin-top: 10px;\n  color: #777;\n  display: inline-block;\n`\nexport const StyledDropdownContainer = styled.div`\n  display: inline-block;\n  font-family: Arial, sans-serif;\n  margin-bottom: 24px;\n`\n\nexport const StyledLabel = styled.label`\n  display: block;\n  font-size: 16px;\n  margin-bottom: 5px;\n  color: #333;\n`\n\nexport const CustomDropdown = styled.select`\n  appearance: none;\n  padding: 10px;\n  font-size: 16px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  background-color: #fff;\n  color: #333;\n  cursor: pointer;\n  width: 200px; /* Adjust the width as needed */\n`\n","import React, { type ChangeEvent, useState } from \"react\"\n\nimport MarkdownTable from \"../../components/MarkdownTable\"\n\nimport * as S from \"./style\"\n\ninterface WordsContProps {\n  value: string\n}\n\nconst fontSizeOptions = [\n  { value: \"14px\", label: \"Small\" },\n  { value: \"16px\", label: \"Medium\" },\n  { value: \"18px\", label: \"Large\" },\n  { value: \"20px\", label: \"XL\" },\n  { value: \"24px\", label: \"XXL\" },\n]\n\nconst WordsCont: React.FC<WordsContProps> = () => {\n  const [inputValue, setInputValue] = useState<string>(\"\")\n  const [wordCount, setWordCount] = useState<number>(0)\n  const [charCount, setCharCount] = useState<number>(0)\n  const [lineCount, setLineCount] = useState<number>(0)\n  const [selectedFontSize, setSelectedFontSize] = useState<string>(\"16px\")\n\n  const handleFontSizeChange = e => {\n    setSelectedFontSize(e.target.value)\n    // You can perform any actions here based on the selected value\n  }\n\n  const countWords = (text: string): number => {\n    const words = text.trim().split(/\\s+/)\n    return words.filter(word => word !== \"\").length\n  }\n\n  const countChars = (text: string): number => {\n    return text.length\n  }\n\n  const countLines = (text: string): number => {\n    return text.split(\"\\n\").length\n  }\n\n  const handleInputChange = (e: ChangeEvent<HTMLTextAreaElement>): void => {\n    const text = e.target.value\n    setInputValue(text)\n    const newWordCount = countWords(text)\n    const newCharCount = countChars(text)\n    const newLineCount = countLines(text)\n\n    // Update counts\n    setWordCount(newWordCount)\n    setCharCount(newCharCount)\n    setLineCount(newLineCount)\n  }\n\n  return (\n    <>\n      <S.StyledDropdownContainer>\n        <S.StyledLabel htmlFor=\"fontSizeDropdown\">\n          Select Preferred Font Size:\n        </S.StyledLabel>\n        <S.CustomDropdown\n          id=\"fontSizeDropdown\"\n          value={selectedFontSize}\n          onChange={handleFontSizeChange}\n        >\n          {fontSizeOptions.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </S.CustomDropdown>\n      </S.StyledDropdownContainer>\n      <S.WordsContWrapper style={{ fontSize: selectedFontSize }}>\n        <textarea\n          rows={10}\n          cols={50}\n          value={inputValue}\n          onChange={handleInputChange}\n          placeholder=\"Start typing...\"\n        />\n        <S.CountInfo>\n          Words: {wordCount} | Characters: {charCount} | Lines: {lineCount}\n        </S.CountInfo>\n      </S.WordsContWrapper>\n      <MarkdownTable text={inputValue} />\n    </>\n  )\n}\n\nexport default WordsCont\n","import React from \"react\"\n\nimport { type PageProps, graphql } from \"gatsby\"\nimport styled from \"styled-components\"\n\nimport Comment from \"~/src/components/comment\"\nimport SEO from \"~/src/components/seo\"\nimport WordsCount from \"~/src/features/WordsCount\"\nimport Layout from \"~/src/layouts/layout\"\nimport Category from \"~/src/styles/category\"\nimport DateTime from \"~/src/styles/dateTime\"\nimport Markdown from \"~/src/styles/markdown\"\nimport { rhythm } from \"~/src/styles/typography\"\n\nconst toolPost: React.FC<PageProps<Queries.Query>> = ({ data }) => {\n  const { markdownRemark } = data\n  const { frontmatter, html } = markdownRemark!\n  const { title, desc, thumbnail, date, category, tool } = frontmatter!\n  console.log(frontmatter)\n  const ogImagePath =\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n    thumbnail &&\n    thumbnail?.childImageSharp?.gatsbyImageData!.images!.fallback!.src\n\n  console.log(\"==>\", ogImagePath)\n  return (\n    <Layout>\n      <SEO title={title} desc={desc} image={ogImagePath} />\n      <main>\n        <article>\n          <OuterWrapper>\n            <InnerWrapper>\n              <div>\n                <header>\n                  <Info>\n                    <PostCategory>{category}</PostCategory>\n                    <Time dateTime={date!}>{date}</Time>\n                  </Info>\n                  <Title>{title}</Title>\n                  <Desc>{desc}</Desc>\n                </header>\n                <img src={ogImagePath} />\n                <Divider />\n                <WordsCount />\n\n                <Divider />\n                <Markdown\n                  dangerouslySetInnerHTML={{ __html: html ?? \"\" }}\n                  rhythm={rhythm}\n                />\n              </div>\n            </InnerWrapper>\n          </OuterWrapper>\n        </article>\n        <CommentWrap>\n          <Comment />\n        </CommentWrap>\n      </main>\n    </Layout>\n  )\n}\n\nconst OuterWrapper = styled.div`\n  margin-top: var(--sizing-xl);\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    margin-top: var(--sizing-lg);\n  }\n`\n\nconst InnerWrapper = styled.div`\n  width: var(--post-width);\n  margin: 0 auto;\n  padding-bottom: var(--sizing-lg);\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    width: 87.5%;\n  }\n`\n\nconst CommentWrap = styled.section`\n  width: 100%;\n  padding: 0 var(--padding-sm);\n  margin: 0 auto;\n  margin-bottom: var(--sizing-xl);\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    width: auto;\n  }\n`\n\nconst PostCategory = styled(Category)`\n  font-size: 0.875rem;\n  font-weight: var(--font-weight-semi-bold);\n`\n\nconst Info = styled.div`\n  margin-bottom: var(--sizing-md);\n`\n\nconst Time = styled(DateTime)`\n  display: block;\n  margin-top: var(--sizing-xs);\n`\n\nconst Desc = styled.p`\n  margin-top: var(--sizing-lg);\n  line-height: 1.5;\n  font-size: var(--text-lg);\n  margin-bottom: 16px;\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    line-height: 1.31579;\n    font-size: 1.1875rem;\n  }\n`\n\nconst Divider = styled.div`\n  width: 100%;\n  height: 1px;\n  background-color: var(--color-gray-3);\n  margin-top: var(--sizing-lg);\n  margin-bottom: var(--sizing-lg);\n`\n\nconst Title = styled.h1`\n  font-weight: var(--font-weight-bold);\n  line-height: 1.1875;\n  font-size: var(--text-xl);\n\n  @media (max-width: ${({ theme }) => theme.device.md}) {\n    line-height: 1.21875;\n    font-size: 2.5rem;\n  }\n\n  @media (max-width: ${({ theme }) => theme.device.sm}) {\n    line-height: 1.21875;\n    font-size: 2rem;\n  }\n`\n\nexport const query = graphql`\n  query ToolPostPage($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n        desc\n        thumbnail {\n          childImageSharp {\n            gatsbyImageData(placeholder: BLURRED, layout: FIXED)\n          }\n        }\n        date(formatString: \"YYYY-MM-DD\")\n        category\n        tool\n      }\n    }\n  }\n`\n\nexport default toolPost\n"],"names":["src","LIGHT_THEME","DARK_THEME","Comment","_site$utterances","site","useSiteMetadata","repo","utterances","undefined","theme","useContext","ThemeContext","containerRef","useRef","isUtterancesCreated","useEffect","_containerRef$current2","console","log","themeMode","current","DARK","document","body","dataset","utterancesEl","querySelector","bbbb","postThemeMessage","_utterancesEl$content","message","type","contentWindow","postMessage","createUtterancesEl","_containerRef$current","comment","createElement","attributes","label","crossOrigin","async","Object","entries","forEach","_ref","key","value","setAttribute","appendChild","React","ref","displayName","Category","styled","span","withConfig","componentId","DateTime","time","Table","table","Th","th","Td","td","text","data","setData","useState","arr","inputString","words","split","wordCounts","word","totalWordCount","length","wordData","count","percentage","toFixed","push","analyzeString","map","item","index","WordsContWrapper","div","CountInfo","StyledDropdownContainer","StyledLabel","CustomDropdown","select","fontSizeOptions","WordsCont","inputValue","setInputValue","wordCount","setWordCount","charCount","setCharCount","lineCount","setLineCount","selectedFontSize","setSelectedFontSize","S","htmlFor","id","onChange","e","target","option","style","fontSize","rows","cols","newWordCount","trim","filter","countWords","newCharCount","countChars","newLineCount","countLines","placeholder","MarkdownTable","OuterWrapper","_ref2","device","sm","InnerWrapper","_ref3","CommentWrap","section","_ref4","PostCategory","Info","Time","Desc","p","_ref5","Divider","Title","h1","_ref6","md","_ref7","_thumbnail$childImage","markdownRemark","frontmatter","html","title","desc","thumbnail","date","category","tool","ogImagePath","childImageSharp","gatsbyImageData","images","fallback","Layout","SEO","image","dateTime","WordsCount","Markdown","dangerouslySetInnerHTML","__html","rhythm"],"sourceRoot":""}